# Vagrant/Ansible Project
# Tzvetan Tzvetkov <tzvetan.tzvetkov@upnetix.com>

require 'yaml'
settings = YAML.load_file '../env/shared-vars.yml'
useHostManager = ENV.has_key?('USE_HOSTMANAGER') ? ENV['USE_HOSTMANAGER'] : false

projectHost =  ENV['USER'].gsub(/\./, '-') + '-' + settings['project_name'].gsub(/\./, '-') + '.upnetix.tech'

Vagrant.configure('2') do |config|
  config.ssh.forward_agent = true
  config.ssh.insert_key = false
#   config.ssh.verify_host_key = :never

  config.vm.box = 'geerlingguy/ubuntu1604'
#  config.vm.box_version = "1.8.0"
  config.vm.guest = :ubuntu

  config.vm.hostname = "#{projectHost}"

  config.vm.provider :virtualbox do |vb|
    vb.cpus = 2
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    vb.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    vb.memory = 512
    vb.name = "#{projectHost}"
    vb.linked_clone = true
  end

  config.vm.provision 'ansible' do |ansible|
    ansible.config_file = 'ansible.cfg'
    ansible.playbook = 'provision.yml'
    ansible.inventory_path = '../env/dev/inventory'
    ansible.galaxy_role_file = 'requirements.yml'
    ansible.galaxy_roles_path = '~/.ansible/roles:./roles'
    ansible.limit = 'all'

    #ansible.ask_vault_pass = true
    ansible.vault_password_file = '../vault_pass'
#    ansible.verbose = "vvv"

    ansible.extra_vars = {
        projectHost: "#{projectHost}"
    }
    ansible.compatibility_mode = "2.0"
    ansible_python_interpreter = "/usr/bin/python3"
  end

  config.vm.synced_folder '../../', settings['project_root'],
    owner: 'www-data',
    group: 'www-data',
    mount_options: ['dmode=775,fmode=664']

  # config is based on https://github.com/bitifet/vagrants/blob/master/Snippets/dhcpNetwork.md
  config.vm.network "public_network",
    use_dhcp_assigned_default_route: true,
    :mac => "080027"+String(Digest::MD5.hexdigest "#{projectHost}").slice(1, 6),
    :bridge => `ip ro ls | grep default | sort -k 9 | head -n 1 | awk '{print $5}' | tr -d "\n"`

  if useHostManager
    # configure /etc/hosts
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = false
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.ip_resolver = proc do |vm, resolving_vm|
      vm.provider.driver.read_guest_ip(1)
    end
  end

end

